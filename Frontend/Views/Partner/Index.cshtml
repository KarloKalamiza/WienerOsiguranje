@model IEnumerable<Frontend.DTO.PartnerDTO>

@{
    ViewData["Title"] = "Index";
}

<a asp-action="Create" class="btn btn-primary btn-lg mb-4">Add Partner</a>

<table id="myTable" class="table table-bordered table-hover table-striped mb-2">
    <thead class="table-dark">
        <tr>
            <th>
                @Html.DisplayName("Full name")
            </th>
            <th>
                @Html.DisplayName("Partner number")
            </th>
            <th>
                @Html.DisplayName("PIN")
            </th>
            <th>
                @Html.DisplayName("Partner type")
            </th>
            <th>
                @Html.DisplayName("Creation date")
            </th>
            <th>
                @Html.DisplayName("Foreign")
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Gender)
            </th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model) 
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.SpecialPartnerSign)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.PartnerNumber)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.CroatianPIN)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.PartnerTypeId)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.CreatedAtUtc)
                </td>
                <td class="checkbox-cell">
                    @if (item.IsForeign)
                    {
                        <i class="fa fa-check text-success"></i> 
                    }
                    else
                    {
                        <i class="fa fa-times text-danger"></i> 
                    }
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Gender)
                </td>
                <td>
                    <!-- Details Icon -->
                    <a asp-action="Details" asp-route-id="@item.PartnerId" class="text-primary" title="Details">
                        <i class="bi bi-info-circle"></i>
                    </a>

                    <!-- Edit Icon -->
                    <a asp-action="Edit" asp-route-id="@item.PartnerId" class="text-primary" title="Edit">
                        <i class="bi bi-pencil-square"></i>
                    </a>
                </td>
            </tr>
        }
    </tbody>
</table>

@section Scripts {
    <script src="https://cdn.datatables.net/1.13.5/js/jquery.dataTables.min.js"></script>    
    <script>
        var table = $('#myTable').DataTable({
            paging: true,
            searching: true,
            ordering: true,
            info: false,
            lengthMenu: [10, 25, 50],
            order: [[4, "desc"]],
            language: {
                emptyTable: "No data available in table",
                search: "Filter records:",
                paginate: {
                    previous: '<span>&lt;</span>',
                    next: '<span>&gt;</span>'
                }
            },
            createdRow: function (row, data, dataIndex) {
                // Add the "highlight" class if the row is new
                if ($(row).hasClass('new-row')) {
                    $(row).addClass('highlight');
                }
            },
            stateSave: true,  // Save the state of the table (pagination, search, etc.)
        });

        // Highlight the row based on newId passed from the controller
        var newId = '@ViewBag.NewId';
        if (newId) {
            // Find the row with the matching data-id
            var row = $(`tr[data-id="${newId}"]`);
            if (row.length) {
                // Highlight the row
                row.addClass('highlight');

                // Optionally scroll to the row
                $('html, body').animate({
                    scrollTop: row.offset().top
                }, 1000);
            }
        }

        // Highlight the active page button
        table.on('draw', function () {
            var pageInfo = table.page.info();  // Get current page info
            var currentPage = pageInfo.page + 1;  // Get the 1-based page index (DataTable uses 0-based indexing)

            // Remove the 'active' class from all pagination buttons
            $('#myTable_paginate .paginate_button').removeClass('active');

            // Add the 'active' class to the current page button
            $('#myTable_paginate .paginate_button').each(function () {
                var pageNumber = $(this).text();
                if (parseInt(pageNumber) === currentPage) {
                    $(this).addClass('active');  // Highlight the current page button
                }
            });

            // If the table is drawn and it's on the first page, highlight the first page button
            if (currentPage === 1) {
                $('#myTable_paginate .paginate_button:first').addClass('active');
            }
        });

        // Trigger the draw event once to ensure the correct active button is set on load
        table.draw();
    </script>
}

<style>
    .highlight {
        background-color: #28a745;
        font-weight: bold;
    }

    .paginate_button.active {
        background-color: #4CAF50; /* Green background */
        color: white;
        font-weight: bold;
        border-radius: 50px; /* Rounded corners for a modern look */
        padding: 8px 16px; /* Padding to make it more spacious */
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Subtle shadow for depth */
        transition: all 0.3s ease; /* Smooth transition for hover effect */
    }

        /* Optional: Hover effect for the active button */
        .paginate_button.active:hover {
            background-color: #45a049; /* Slightly darker green when hovered */
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2); /* Slightly stronger shadow */
            transform: translateY(-2px); /* Lift effect on hover */
        }

    /* Style for other pagination buttons */
    .paginate_button {
        border-radius: 50px; /* Rounded corners for all buttons */
        padding: 8px 16px; /* Uniform padding */
        font-size: 14px; /* Slightly larger font size for better readability */
        color: #333; /* Default button color */
        background-color: #f1f1f1; /* Light gray background for unselected buttons */
        border: 1px solid #ddd; /* Light border */
        transition: all 0.3s ease; /* Smooth transition for hover effect */
    }

        /* Hover effect for other buttons */
        .paginate_button:hover {
            background-color: #ddd; /* Light gray background when hovered */
            color: #4CAF50; /* Green text color */
            border-color: #4CAF50; /* Green border on hover */
        }

        /* Disable button (for example, previous/next on first/last page) */
        .paginate_button.disabled {
            background-color: #e0e0e0; /* Light gray for disabled state */
            color: #b0b0b0; /* Gray color for text */
            border: 1px solid #ddd; /* Border for disabled state */
            cursor: not-allowed; /* Show not-allowed cursor */
        }
</style>